apply plugin: 'java'
apply plugin: 'maven'
def doSigning = gradle.startParameter.taskNames.contains("signArchives")
if (doSigning) {
    apply plugin: 'signing'
}
apply plugin: 'eclipse'

group = 'com.timgroup'

def majorVersion = 1
def minorVersion = 0

/** for Maven Central; manually bump major and/or minor version numbers before building */
def isPublicRelease() {
    return "".equals(System.getenv('BUILD_NUMBER'))
}

/** CI builds */
def isPrivateRelease() {
    return !isPublicRelease() && System.getenv('BUILD_NUMBER') != null
}

if (isPublicRelease()) {
    version = "${majorVersion}.${minorVersion}"
} else if (isPrivateRelease()) {
    def buildNumber = System.getenv('BUILD_NUMBER')
    version = "${majorVersion}.${minorVersion}.${buildNumber}"
} else /* dev build */ {
    def timestamp = new Date().format('yyyyMMdd-HHmmss', TimeZone.getTimeZone('UTC'))
    version = "${majorVersion}.${minorVersion}-${timestamp}"
}

jar {
    manifest { 
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'youDevise Ltd',
            'Implementation-Vendor-Id': project.group,
            'Implementation-URL': 'https://github.com/youdevise/Tucker'
        )
    }
}

repositories {
    mavenLocal()
    mavenRepo url: "${repoUrl}/groups/public"
}

def slf4jVersion = '1.6.4'

// some of these dependencies are optional, in that they are needed to build, but might not be needed to run; Gradle does currently let us say so
dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'com.yammer.metrics', name: 'metrics-core', version: '2.0.2' // optional
    compile group: 'javax.servlet', name: 'servlet-api', version: '2.5' // optional
    
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.8.5'
    
    testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
 
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (doSigning) {
                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                }
            }
            
            repository(url: "${project.repoUrl}/repositories/yd-release-candidates") {
                authentication(userName: project.repoUsername, password: project.repoPassword)
            }
        }
    }
}

if (doSigning) {
    signing {
        sign configurations.archives
    }
    
    signArchives.doFirst {
        assert file('gradle.properties').isFile(), "in order to sign anything, you need to supply signing properties via gradle.properties - see http://www.gradle.org/docs/current/userguide/signing_plugin.html"
    }
}

eclipse {
    classpath {
        defaultOutputDir = file('.eclipse')
    }
}

task hgignore << {
    // gitignore and hgignore syntax are similar enough that this works (for now)
    file('.hgignore').withWriter { out ->
        out.println 'syntax: glob'
        out.println '.hgignore'
        file('.gitignore').eachLine { line ->
            out.println line
        }
    }
}
